FROM nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04 AS base

# 非インタラクティブモードにする (入力待ちでブロックしなくなる)
ENV DEBIAN_FRONTEND=noninteractive
# .pycを作らないように
ENV PYTHONDONTWRITEBYTECODE 1
# バッファの無効化
ENV PYTHONUNBUFFERED 1
# rootのpython環境へのパス
ENV PYTHONPATH /usr/local/lib/python3.8/dist-packages
# torchvisionでpretrainedのモデルを保存する場所
ENV TORCH_HOME /app/.cache

WORKDIR /app

RUN apt update && \
    apt install -y \
    wget \
    bzip2 \
    build-essential \
    git \
    git-lfs \
    curl \
    ca-certificates \
    libsndfile1-dev \
    libgl1 \
    python3.8 \
    python3-pip

# ----------------------------------------------------------------
# create user
# ----------------------------------------------------------------
# UIDとGIDは外から与える
ARG USER_UID
ARG USER_GID

# コンテナ内でのユーザー名， グループ名
ARG USER_NAME=user
ARG GROUP_NAME=user

# グループが存在しなかったら，　適当なグループを作成
RUN if ! getent group $USER_GID >/dev/null; then \
    groupadd -g $USER_GID $GROUP_NAME; \
    fi

# ユーザーを作成
RUN useradd -m -u $USER_UID -g $USER_GID -s /bin/bash $USER_NAME
RUN chown ${USER_UID}:${USER_GID} /app

# 初期ユーザーの変更
USER $USER_NAME
ENV PATH /home/$USER_NAME/.local/bin:$PATH

# ----------------------------------------------------------------
# requiremtentsはtorchよりも更新されうるのでここでは入れない
RUN pip3 install --no-cache-dir -U pip setuptools wheel

# ----------------------------------------------------------------
FROM base AS torch-1.13.0

ENV POETRY_VERSION=1.8.2 
ENV POETRY_NO_INTERACTION=1 
ENV POETRY_VIRTUALENVS_CREATE=true
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV VENV_PATH="/app/.venv"

RUN pip install --no-cache-dir poetry==$POETRY_VERSION

COPY pyproject.toml poetry.lock ./

RUN poetry install
# ----------------------------------------------------------------
# 上と同じやつでも良い
FROM base AS torch-2.0.0

ENV POETRY_VERSION=1.8.2 
ENV POETRY_NO_INTERACTION=1 
ENV POETRY_VIRTUALENVS_CREATE=true
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV VENV_PATH="/app/.venv"

RUN pip install --no-cache-dir poetry==$POETRY_VERSION

COPY pyproject.toml poetry.lock ./

RUN poetry install
